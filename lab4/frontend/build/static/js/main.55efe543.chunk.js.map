{"version":3,"sources":["components/Header.js","components/DisplayBoard.js","components/Movies.js","components/CreateMovie.js","components/SearchMovie.js","services/MovieService.js","App.js","serviceWorker.js","components/AppError.js","index.js"],"names":["Header","React","createElement","style","width","padding","backgroundColor","color","textAlign","DisplayBoard","_ref","numberOfMovies","getAllMovies","className","type","onClick","e","Movies","movies","console","log","length","movieTable","map","movie","index","MovieRow","key","title","genre","director","release_year","CreateMovie","onChangeForm","createMovie","htmlFor","onChange","name","id","placeholder","SearchMovie","searchMovie","async","response","fetch","json","error","App","search_data","setSearch_data","useState","setMovie","setMovies","setNumberOfMovies","fetchAllMovies","then","useEffect","target","value","data","method","headers","body","JSON","stringify","user","search_text","Boolean","window","location","hostname","match","ErrorComponent","AppError","Component","constructor","arguments","state","hasError","componentDidCatch","info","this","setState","render","children","props","getDerivedStateFromError","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.55efe543.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n\n    const headerStyle = {\n\n        width: '100%',\n        padding: '2%',\n        backgroundColor: \"red\",\n        color: 'white',\n        textAlign: 'center'\n    }\n\n    return(\n        <div style={headerStyle}>\n            <h1>React With NodeJS</h1>\n        </div>\n    )\n}","import React from 'react'\n\nexport const DisplayBoard = ({numberOfMovies, getAllMovies}) => {\n\n    const headerStyle = {\n\n        width: '100%',\n        padding: '2%',\n        backgroundColor: \"red\",\n        color: 'white',\n        textAlign: 'center'\n    }\n    \n    return(\n        <div style={{backgroundColor:'green'}} className=\"display-board\">\n            <h4 style={{color: 'white'}}>Movies Created</h4>\n            <div className=\"number\">\n            {numberOfMovies}\n            </div>\n            <div className=\"btn\">\n                <button type=\"button\" onClick={(e) => getAllMovies()} className=\"btn btn-warning\">Get all Movies</button>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const Movies = ({movies}) => {\n\n    console.log('movies length:::', movies.length)\n    if (movies.length === 0) return null\n\n    const MovieRow = (movie,index) => {\n\n        return(\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\n                  <td>{index + 1}</td>\n                  <td>{movie.title}</td>\n                  <td>{movie.genre}</td>\n                  <td>{movie.director}</td>\n                  <td>{movie.release_year}</td>\n              </tr>\n          )\n    }\n\n    const movieTable = movies.map((movie,index) => MovieRow(movie,index))\n\n    return(\n        <div className=\"container\">\n            <h2>Movies</h2>\n            <table className=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th>Movie Id</th>\n                    <th>Title</th>\n                    <th>Genre</th>\n                    <th>Director</th>\n                    <th>Release</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {movieTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n","import React from 'react'\n\n\nconst CreateMovie = ({onChangeForm, createMovie }) => {\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-7 mrgnbtm\">\n                <h2>Create Movie</h2>\n                <form>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputEmail1\">Title</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)}  className=\"form-control\" name=\"title\" id=\"title\" placeholder=\"Title\" />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputPassword1\">Genre</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"genre\" id=\"genre\" placeholder=\"Genre\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputEmail1\">Director</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"director\" id=\"director\" placeholder=\"Director\" />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputEmail1\">Release</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"release_year\" id=\"release_year\" placeholder=\"Release\" />\n                        </div>\n                    </div>\n                    <button type=\"button\" onClick= {(e) => createMovie()} className=\"btn btn-danger\">Create</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateMovie\n","import React from 'react'\n\n\nconst SearchMovie = ({onChangeForm, searchMovie }) => {\n\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-7 mrgnbtm\">\n                <h2>Search Movie</h2>\n                <form>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"director\" id=\"director\" placeholder=\"Director\" />\n                        </div>\n\n                    </div>\n                    <button type=\"button\" onClick= {(e) => searchMovie()} className=\"btn btn-danger\">Search</button>\n                </form>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default SearchMovie\n\n\n","export async function searchMovie(search_data) {\n\n    try {\n\n        console.log('search_data: ' + search_data);\n\n        const response = await fetch('http://localhost:3001/api/movie/search?search_text=' + search_data);\n\n        return await response.json(); //***\n\n        // console.log('Search Movie response: ' + await response);\n\n    } catch (error) {\n        return [];\n    }\n\n}\n\nexport async function getAllMovies() {\n\n    try{\n        //const response = await fetch('/api/users');\n         const response = await fetch('http://localhost:3001/api/movie/all');\n        //const response = await fetch('/api/movie/all');\n        return await response.json();\n    }catch(error) {\n        return [];\n    }\n    \n}\n\n//---- ยังไม่เสร็จ ----\nexport async function createMovie(data) {\n    const response = await fetch(`/api/user`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({user: data})\n      })\n    return await response.json();\n}\n","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Header } from './components/Header'\nimport { DisplayBoard } from './components/DisplayBoard'\n\n//----------------\nimport { Movies } from './components/Movies'\nimport CreateMovie from './components/CreateMovie'\nimport SearchMovie from './components/SearchMovie'\nimport { getAllMovies, createMovie, searchMovie } from './services/MovieService'\n\nfunction App() {\n\n  //--------------\n  const [search_data, setSearch_data] = useState({})\n  const [movie, setMovie] = useState({})\n  const [movies, setMovies] = useState([])\n  const [numberOfMovies, setNumberOfMovies] = useState(0)\n\n  const movieCreate = (e) => {\n\n    createMovie(movie)\n      .then(response => {\n        console.log(response);\n        setNumberOfMovies(numberOfMovies + 1)\n      });\n\n    fetchAllMovies(); /* */\n  }\n\n\n  const movieSearch = (e) => {\n    \n    console.log(search_data.search_text);\n\n    searchMovie(\"jok\")\n    // searchMovie(search_data.search_text)\n      .then(movies => {\n        console.log(movies.data);\n        setMovies(movies.data);\n        setNumberOfMovies(movies.data.length);\n\n      });\n\n  }\n  const fetchAllMovies = () => {\n    getAllMovies()\n      .then(movies => {\n        console.log(movies);\n        setMovies(movies);\n        setNumberOfMovies(movies.length);\n      });\n  }\n\n\n  useEffect(() => {\n\n    getAllMovies()\n      .then(movies => {\n        console.log(movies)\n        setMovies(movies);\n        setNumberOfMovies(movies.length)\n      });\n      \n\n  }, [])\n\n  const onChangeForm = (e) => {\n    if (e.target.name === 'title') {\n      movie.title = e.target.value;\n    } else if (e.target.name === 'genre') {\n      movie.genre = e.target.value;\n    } else if (e.target.name === 'director') {\n      movie.director = e.target.value;\n    } else if (e.target.name === 'release_year') {\n      movie.release_year = e.target.value;\n    }\n    setMovie(movie)\n  }\n\n\n  const onChangeForm2 = (e) => {\n    if (e.target.name === 'search_text') {\n      search_data.search_text = e.target.value;\n    } \n    setSearch_data(search_data)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <div className=\"container mrgnbtm\">\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <CreateMovie\n              // user={user}\n              movie={movie}\n              onChangeForm={onChangeForm}\n              createMovie={movieCreate}\n            >\n            </CreateMovie>\n          </div>\n          <div className=\"col-md-4\">\n            <DisplayBoard\n              numberOfMovies={numberOfMovies}\n              getAllMovies={fetchAllMovies}\n            >\n            </DisplayBoard>\n          </div>\n        </div>\n      </div>\n      <div className=\"row mrgnbtm\">\n\n          <SearchMovie\n              // user={user}\n              movie={movie}\n              onChangeForm={onChangeForm}\n              searchMovie={movieSearch}\n            >\n          </SearchMovie>\n\n        {/* <SearchBoard\n          // user={user}\n          search_data={search_data}\n          onChangeForm2={onChangeForm2}\n          searchMovies={searchMovie}\n        >\n        </SearchBoard> */}\n\n      </div>\n      <div className=\"row mrgnbtm\">\n        <Movies movies={movies}></Movies>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst ErrorComponent = () => {\n  return <h1>Something went wrong</h1>;\n};\n\nexport class AppError extends React.Component {\n  \n  state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError = error => {\n    return { hasError: true };\n  };\n\n  componentDidCatch = (error, info) => {\n    this.setState({ error, info });\n  };\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    return hasError ? <ErrorComponent /> : children;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppError } from './components/AppError';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppError>\n      <App />\n    </AppError>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}